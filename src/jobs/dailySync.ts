import cron from 'node-cron';
import { syncAssets, testSync } from '@/services/brapiSync';
import prisma from '@/lib/prisma';

// ================== CONFIGURATION ==================

// Configura√ß√£o do cron job - executa todos os dias √†s 02:00
const CRON_SCHEDULE = '0 2 * * *'; // Formato: minuto hora dia m√™s dia-da-semana

// ================== SYNC FUNCTIONS ==================

/**
 * Executa a sincroniza√ß√£o de ativos
 */
const executeSync = async (): Promise<void> => {
  console.log('üïê Iniciando sincroniza√ß√£o di√°ria de ativos...');
  console.log(`üìÖ Data/Hora: ${new Date().toLocaleString('pt-BR')}`);
  
  try {
    const result = await syncAssets();
    
    // Log do resultado
    console.log('üìä Resultado da sincroniza√ß√£o:');
    console.log(`   ‚Ä¢ Ativos B3: ${result.stocks.inserted} inseridos, ${result.stocks.updated} atualizados, ${result.stocks.errors} erros`);
    console.log(`   ‚Ä¢ Criptoativos: ${result.crypto.inserted} inseridos, ${result.crypto.updated} atualizados, ${result.crypto.errors} erros`);
    console.log(`   ‚Ä¢ Total: ${result.total.inserted} inseridos, ${result.total.updated} atualizados, ${result.total.errors} erros`);
    console.log(`   ‚Ä¢ Dura√ß√£o: ${result.duration.toFixed(2)}s`);
    
    // Aqui voc√™ pode adicionar notifica√ß√µes, logs para banco, etc.
    await logSyncResult();
    
  } catch (error) {
    console.error('üí• Erro durante a sincroniza√ß√£o di√°ria:', error);
    
    // Aqui voc√™ pode adicionar notifica√ß√µes de erro, logs para banco, etc.
    await logSyncError();
    
    throw error;
  }
};

/**
 * Registra o resultado da sincroniza√ß√£o (opcional - para auditoria)
 */
const logSyncResult = async (): Promise<void> => {
  try {
    // Aqui voc√™ pode salvar o resultado em uma tabela de logs
    // Por exemplo, criar uma tabela sync_logs se necess√°rio
    console.log('üìù Resultado da sincroniza√ß√£o registrado');
  } catch (error) {
    console.error('‚ùå Erro ao registrar resultado:', error);
  }
};

/**
 * Registra erros da sincroniza√ß√£o (opcional - para auditoria)
 */
const logSyncError = async (): Promise<void> => {
  try {
    // Aqui voc√™ pode salvar o erro em uma tabela de logs
    console.log('üìù Erro da sincroniza√ß√£o registrado');
  } catch (logError) {
    console.error('‚ùå Erro ao registrar erro:', logError);
  }
};

// ================== CRON JOB SETUP ==================

/**
 * Inicia o cron job para sincroniza√ß√£o di√°ria
 */
export const startDailySync = () => {
  console.log('üöÄ Iniciando cron job para sincroniza√ß√£o di√°ria...');
  console.log(`‚è∞ Agendado para executar: ${CRON_SCHEDULE} (todos os dias √†s 02:00)`);
  
  // Validar se o cron schedule √© v√°lido
  if (!cron.validate(CRON_SCHEDULE)) {
    throw new Error(`Cron schedule inv√°lido: ${CRON_SCHEDULE}`);
  }
  
  // Configurar o cron job
  const task = cron.schedule(CRON_SCHEDULE, async () => {
    try {
      await executeSync();
    } catch (error) {
      console.error('üí• Erro no cron job:', error);
    }
  }, {
    timezone: 'America/Sao_Paulo' // Timezone do Brasil
  });
  
  console.log('‚úÖ Cron job configurado com sucesso!');
  
  // Retornar a task para controle (opcional)
  return task;
};

/**
 * Para o cron job
 */
export const stopDailySync = (task: { stop: () => void } | null): void => {
  if (task) {
    task.stop();
    console.log('‚èπÔ∏è  Cron job parado');
  }
};

// ================== MANUAL EXECUTION ==================

/**
 * Executa a sincroniza√ß√£o manualmente (para testes)
 */
export const runManualSync = async (): Promise<void> => {
  console.log('üîß Executando sincroniza√ß√£o manual...');
  
  try {
    await executeSync();
    console.log('‚úÖ Sincroniza√ß√£o manual conclu√≠da com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o manual:', error);
    throw error;
  }
};

/**
 * Testa a sincroniza√ß√£o sem executar
 */
export const testSyncConnection = async (): Promise<boolean> => {
  console.log('üß™ Testando conex√£o com APIs...');
  
  try {
    const isWorking = await testSync();
    
    if (isWorking) {
      console.log('‚úÖ Teste de conex√£o passou!');
    } else {
      console.log('‚ùå Teste de conex√£o falhou!');
    }
    
    return isWorking;
  } catch (error) {
    console.error('‚ùå Erro no teste de conex√£o:', error);
    return false;
  }
};

// ================== GRACEFUL SHUTDOWN ==================

/**
 * Configura o shutdown graceful
 */
export const setupGracefulShutdown = (task: { stop: () => void } | null): void => {
  const shutdown = async () => {
    console.log('üõë Iniciando shutdown graceful...');
    
    if (task) {
      stopDailySync(task);
    }
    
    await prisma.$disconnect();
    console.log('‚úÖ Shutdown conclu√≠do');
    process.exit(0);
  };
  
  // Capturar sinais de shutdown
  process.on('SIGINT', shutdown);
  process.on('SIGTERM', shutdown);
  process.on('SIGUSR2', shutdown); // Para nodemon
  
  console.log('üõ°Ô∏è  Graceful shutdown configurado');
};

// ================== EXPORTS ==================

export {
  CRON_SCHEDULE,
  executeSync
};

